<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>仙魔变</key>
	<string>一朝穿越，她成了寄人篱下的孤女，被舅舅许配他人。高墙大院中，她那高贵的夫君，在一番甜蜜婉转后，赐予她一封休书。她终于明白那曲意奉承间暗藏着的波涛汹涌。既然息事宁人不成，那就反击。看她如何征服他的心，打败小三，峰回路转，柳暗花明……
　　第一章：穿越千年
　　叶子宜正和李氏讨教着绣花忽然听到门外响起一阵爽朗的笑声，李氏忙小声在她耳边提醒：“是周大奶奶，平时你叫她大嫂子。正说着就见来人已走进了屋子，君宜忙起来叫了一声，“嫂子，你来了。”
　　“哎呀，怎么起来了？听说妹妹身子又不爽利，嫂子我这心里呀一直都放不下，这府里上上下下的事又多忙得我昏头转向的，这会终得空了，赶紧过来看看妹妹。”这周大奶奶噼里啪啦一顿数，君宜低着头一幅认真听的样子，心里却愎悱着：岂是不爽利，人都死了，还看个屁呀，看样子这个小姐当得是不怎么样。嘴里却赶紧回到：
　　“谢谢嫂子关心，这几日妹妹已是大好，这不，我还跟李妈学着绣菊呢。”
　　“哎哟，那我就放心了，老祖宗那里我就好去回话了，我的好妹妹，你可是我们老祖宗心坎里的宝贝疙瘩呀！”周大奶奶用眼偷偷瞥了一眼子宜，叹了一口气又道：“哎，妹妹年纪也不小了，太太呢，哎呀！”看周大奶奶一幅欲言又止的样子，子宜心里一阵咯噔，有种不好的预感：不会想着随便找个人家把她打发了吧，不要呀。
　　“哎呀，妹子呀，我们这女人呀，一辈子也就只能是仰仗二个男人，一个是父亲，一个是丈夫。妹妹命苦哇!”说着，居然掏出手帕试着眼睛。</string>
	<key>猫小猫</key>
	<string>千年前，她淡淡一笑，离他而去，没看到他生平流下的第一滴泪。千年后，她无意中踏入这片魔刹古国遗址，却是穿越到了五百年前。此时，他是天朝的太子，一如既往地冷酷、无情，没有眼泪。而她，成了女扮男装的唐七少，欠了身旁那个静默沉敛的替身侍卫一身情债。当魔刹帝国的遗臣寻来，她是否能记起当年那个满腹悲伤却流不出眼泪的男子？当魔者身份一一揭晓，她是否能认得出那个一直沉默着的侍卫究竟是谁？当过往的恩怨情仇慢慢揭开，她才知道，当年，她走后，他犯下了多大的错误！
　　第一章：唐梦唐影
　　皇城里最大的妓院红楼顶，每日必开的早课又开始了。
　　今早来上课的是个蒙面男子，身形有些清瘦，手中折扇轻摇，正是这红楼幕后的主子唐老板。
　　“知道男人的心是什么做的吗？”
　　“铁做，铁石心肠！”
　　“石头做的，冥顽不灵！”
　　“花做的，太花了！”
　　……
　　一排花枝招展的女子你一言我一语，众说纷纭。
　　男子懒懒地将手中折扇举了起来，这下子，偌大的阁楼上便又安安静静了。
　　“洋葱做的！”男子从软塌上起身，踱了几步，解释道：“男人的心啊，就像洋葱，藏着太深了，想要得到男人的心就要耐着性子，一层一层地剥。”
　　众女子连连点头，掌声四起，不愧是老板，说得太有道理了。</string>
	<key>持续集成基本概念</key>
	<string>今年7月份中下旬，笔者见过一个号称“资深开发者”的哥们（据说编程有十来年了），笔者问他：“你们平时用的持续集成工具都有哪些？”这哥们回答：“那些都是骗客户的，其实我们什么都不用，还是各干各的，然后让一个人收集代码，进行测试。那些大公司，比如XX数码什么的，CI用的也极差”。笔者于是愕然。可见在实际软件开发工作中，持续集成远未得到普及，其中的原因无非是：
l  程序员习惯了原有手工作坊开发的方式
l  没有真正体验过持续集成的好处
l  持续集成涉及的知识点、工具太多，学习比较困难，造成CI人才的严重缺乏
l  很多中小软件公司的老板不理解开发质量的重要性，认为持续集成是重复成本，不愿意花钱培养或雇用CI人才
　　其实，如果不吃几次亏，国内的软件公司很少会去主动实施CI。比如笔者一个朋友所在公司，以前软件开发连源代码备份都没有，产品被客户投诉N多回，结果以前的代码都找不到了，只好重新开发。后来不得已上了SVN、CVS，好歹可以备份源代码并且回溯版本了。最关键的是：没见到因为加了版本控制工作就多花了钱和时间！CI其实也是同样的道理。
　　以笔者有限的经验看，一旦你真的建立起自动化的持续集成环境，到开发软件的时候，就可以把主要精力放在产品设计和开发本身了，反而会节约不少精力。笔者作为一个门外汉，从知道有持续集成到能搭建出一个简单的、自动化的持续集成环境，实际花了一个多月的自学时间。对笔者来说，学习持续集成其实是件很头疼、很困难的事情，但这很有意义。对于软件开发专业人士来说，我想这个学习过程应该会更短、更简单吧。后面还有9篇学习笔记，待整理好后再逐次上传。
 
（一）为什么需要持续集成
“敏捷编程”（Agile Programming）的思想若干年前就已经提出，并在业界获得广泛支持。从团队日常开发的角度来看，Agile Programming就是：
&quot;Short Cycles that are test-driven and feedback-driven, yielding constant improvement.&quot;
其中，
l  short cycle是核心。整个软件开发活动应该被划分成一系列短的迭代过程，每个迭代完成一定数目的功能。迭代周期应该尽量短。
l  更为重要的是，迭代应该是由测试（TDD）和反馈驱动的。只有这样，我们才能为持续改进打下一个良好基础。
如何实现short cycle，就不得不用到持续集成（持续集成出现的时间早于敏捷编程）。一方面，良好的持续集成（集成时间频率可以根据项目需要自主决定）完全可以自动化地实现short cycle；另一方面，利用相关插件，持续集成可以实现对TDD的支持。可以说，持续集成是敏捷编程的重要实践基础，没有持续集成，所谓的敏捷编程便缺了最重要的一条腿，而基本不可能实现。
国内外比较有名的互联网、IT公司在开发中几乎全部实现了持续集成，比如淘宝、facebook、微软等。
（二）持续集成定义
那么，持续集成究竟是什么呢？根据敏捷大师Martin Fowler的定义，
“持续集成是一种软件开发实践。在持续集成中，团队成员频繁集成他们的工作成果，一般每人每天至少集成一次，也可以多次。每次集成会经过自动构建（包括自动测试）的检验，以尽快发现集成错误。许多团队发现这种方法可以显著减少集成引起的问题，并可以加快团队合作软件开发的速度。这篇文章简要介绍了持续集成的技巧和它最新的应用。”
这个定义本身不难理解，关键是要领会到：持续集成是自动化、每天都要进行的过程。如果是手工去做相关工作，估计会累死人的。
（三）持续集成过程
持续集成工作的阶段也比较明确，主要有两个大的阶段：持续集成准备阶段、持续集成使用阶段。
1、持续集成准备阶段的工作主要包括：
1.1.   通过版本控制/配置管理工具（比如SVN或GIT）建立源代码仓库
1.2.   使用构建工具，建立相关配置文件（比如maven的POM文件）
1.3.   通过CI服务器（比如jenkins）建立一个job，将版本控制仓库和构建工具有机整合起来，并设置构建触发条件</string>
</dict>
</plist>
